<#
 #
 # Copyright (C) 2018 - 2020 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file rest_srr_save_POST.ecpp
 * \author Xavier Millieret <XavierMillieret@Eaton.com>
 * \brief Implementation of POST save operations.
 */
 #><%pre>

#include "src/fty_srr_helpers.h"
#include <fty_common_rest.h>
#include <fty_log.h>
#include <srr_pb.h>
#include <cxxtools/base64codec.h>

using namespace dto::srr;

// backward compatibility for reauth. TODO: remove it for next release
static std::string encodeReauthToken(const std::string& accessToken)
{
    std::string token{accessToken};

    bool withBearer = (token.compare(0, 7, "Bearer ") == 0);
    if (withBearer) {
        token = token.substr(7);
    }

    std::size_t pos = token.find(':');
    if (pos != std::string::npos) {
        // we have an old style re-auth, encode it to base64
        token = cxxtools::Base64Codec::encode(token);
    }

    if (withBearer) {
        token = "Bearer " + token;
    }
    return token;
}

static std::string simpleAccessToken(const std::string& accessToken)
{
    std::string token = encodeReauthToken(accessToken);
    if (token.compare(0, 7, "Bearer ") == 0) {
        token = token.substr(7);
    }
    return token;
}


/**
 * Restore IPM2 configuration data
 *
 */

static std::string restoreIpm2Configuration(const std::string& inputData, bool force)
{
    dto::UserData reqData;
    reqData.push_back(inputData);
    if(force) {
        reqData.push_back("force");
    }

    // Send request
    dto::UserData respData = sendRequest("restore", reqData);

    // respData[0] -> status
    // respData[1] -> data
    if (respData.size() != 2)
    {
       throw std::runtime_error("Restore error.");
    }

    if(respData.front() == "unknown") {
        throw std::logic_error(respData.back());
    }
    return respData.back();
}

</%pre>
<%request scope="global">
UserInfo user;
</%request>
<%cpp>
    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Admin, "C"}
    };

    CHECK_USER_PERMISSIONS_OR_DIE(PERMISSIONS);

    if (!user.reauth())
    {
        http_die("internal-error", "Wrong confirmation password");
    }

    try
    {
        // force parameter to skip integrity check
        std::string force = qparam.param("force");
        std::string token = request.getHeader(tnt::httpheader::authorization); //"Bearer WmJDWGh1QjkzcGYvUE9XK3hMeTRKNWFrOm5vc291cDR1IQ=="
        std::string requestPayload = addSessionToken(request.getBody(), simpleAccessToken(token));
        reply.out() << restoreIpm2Configuration(requestPayload, force == "true");
    }
    catch (const std::logic_error& ex)
    {
        http_die ("precondition-failed", ex.what());
    }
    catch (const std::runtime_error& ex)
    {
        http_die ("internal-error", TRANSLATE_ME ("SrrException on restore IPM2").c_str());
    }

</%cpp>
