<#
 #
 # Copyright (C) 2018 - 2020 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file rest_srr_save_POST.ecpp
 * \brief Implementation of POST save operations.
 */
 #><%pre>

#include "src/fty_srr_helpers.h"
#include <fty_common_rest.h>
#include <fty_log.h>
#include <srr_pb.h>

using namespace dto::srr;

/**
 * Get IPM2 configuration data from an input list
 *
 */
static std::string saveIpm2Configuration(const std::string &inputData)
{
    dto::UserData reqData;
    reqData.push_back(inputData);

    // Send request
    dto::UserData respData = sendRequest("save", reqData);

    // respData[0] -> status, respData[1] -> data
    if (respData.size() != 2) {
       throw std::runtime_error("Save error.");
    }
    return respData.back();
}

</%pre>
<%request scope="global">
UserInfo user;
std::string gaccess_token;
</%request>
<%cpp>
    logDebug("{}", request.getUrl());

    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
        {BiosProfile::Admin, "C"}
    };

    CHECK_USER_PERMISSIONS_OR_DIE(PERMISSIONS);

    bool success = false;
    try {
        //gaccess_token as no 'Bearer' prefix, and no reauth part
        std::string requestPayload = addSessionToken(request.getBody(), gaccess_token);

        std::string response = saveIpm2Configuration(requestPayload);

        reply.out() << response;
        success = true;
    }
    catch (const std::runtime_error& e) {
        logError("std::runtime_error: {}", e.what());
    }
    catch (...) {
        logError("{}", "Unexpected exception");
    }

    if (!success) {
        http_die ("internal-error", TRANSLATE_ME ("SrrException on save").c_str());
    }
</%cpp>
